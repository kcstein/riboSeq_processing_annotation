"""

This script was initially written by Eugene Oh and Annemarie Becker as Supplementary Note 2. It has been modified by Justin Chartron and Kevin Stein

From a Bowtie alignment file, this script generates a file containing read density at each nucleotide in a reference file.

inputFile (sys.argv[1]):
.map file generated by Bowtie default output.

outputFileP (sys.argv[2]):
read density file for plus strand (.density)
    col0: genomic feature of interest
    col1: position along genome
    col2: read density at that position

refFile (sys.argv[3]):
FASTA format of coding sequences, with entire sequences on single lines.

The length of each open reading frame is obtained directly from the fasta file used to generate the bowtie library.
Regions that are not observed within each gene are given a zero value.

"""

import sys

def rawdata(inputFile, refFile, outputFile):

    countsDict = {}
    refDict = {}
    ref=open(refFile,"r")
    line=ref.readline()
    while line != "":
        refgeneb = str(line[1:len(line)])
        refgene = refgeneb.strip()
        line=ref.readline()
        refseq = line.strip()
        refDict[refgene] = {i:c for i,c in enumerate(refseq, 1)}
        countsDict[refgene] = {i:0 for i,c in enumerate(refseq, 1)}
        line=ref.readline()
       
    inFile = open(inputFile, 'r')
    line = inFile.readline()
    while line != '':
        fields = line.split()
        gene = str(fields[3])   #gene
        readposition = int(fields[4])   #left-most position based on having 21 flanking nucleotides before 'A' of ATG
        readseq = str(fields[5])   #footprint seq
        readlength = len(readseq)      #footprint length
                
        if 23 <= readlength <= 33:    #select range of footprint read lengths
	    if readlength == 23:
	        offsetposition = int(readposition + 11) #assign A-site with 11 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1 
	    if readlength == 24:
	        offsetposition = int(readposition + 12) #assign A-site with 12 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1  
            if readlength == 25:
	        offsetposition = int(readposition + 13) #assign A-site with 13 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1  
            if readlength == 26:
	        offsetposition = int(readposition + 14) #assign A-site with 14 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1         
            if readlength == 27:
	        offsetposition = int(readposition + 15) #assign A-site with 15 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1 
            if 28 <= readlength <= 30:
	        offsetposition = int(readposition + 16) #assign A-site with 16 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1 
            if 31 <= readlength <= 32:
	        offsetposition = int(readposition + 17) #assign A-site with 17 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1
	    if 33 <= readlength <= 34:
	        offsetposition = int(readposition + 18) #assign A-site with 18 nucleotide offset from 5' end                  
                if gene in countsDict:
                    if offsetposition in countsDict[gene]:              
                        countsDict[gene][offsetposition] = countsDict[gene][offsetposition] + 1
                else:
                    countsDict[gene][offsetposition] = 1    
                          
        line = inFile.readline()

    outFile = open(outputFile, 'w')
    for G in sorted(countsDict.keys()) and sorted(refDict.keys()):
        for x in sorted(countsDict[G].keys()) and sorted(refDict[G].keys()):
            outFile.write(str(G) + '\t' + str(x-22) + '\t' + str(refDict[G][x]) + '\t' + str(countsDict[G][x]) + '\n') #An offset is introduced for flanking region. Position 0 corresponds to 'A' in 'ATG'.

if __name__=='__main__':
    inputFile = sys.argv[1]
    outputFile = sys.argv[2]
    refFile= sys.argv[3]

    rawdata(inputFile, refFile, outputFile)